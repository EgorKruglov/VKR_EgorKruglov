import React, { useState, useEffect } from 'react';
// import './AdminOrders.css';

const AdminOrders = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedStatus, setSelectedStatus] = useState('');

    useEffect(() => {
        const fetchAllOrders = async () => {
            try {
                const authToken = localStorage.getItem('authToken');
                const response = await fetch('https://your-api-endpoint.com/api/orders/all', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Не удалось загрузить заявки');
                }

                const data = await response.json();
                setOrders(data);
                setLoading(false);
            } catch (err) {
                setError(err.message);
                setLoading(false);
            }
        };

        fetchAllOrders();
    }, []);

    const handleStatusChange = async (orderId, newStatus) => {
        try {
            const authToken = localStorage.getItem('authToken');
            const response = await fetch(`https://your-api-endpoint.com/api/orders/${orderId}/status`, {
                method: 'PATCH',
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (!response.ok) {
                throw new Error('Не удалось обновить статус');
            }

            setOrders(orders.map(order =>
                order.id === orderId ? { ...order, status: newStatus } : order
            ));
        } catch (err) {
            alert(`Ошибка: ${err.message}`);
        }
    };

    const handleDeleteOrder = async (orderId) => {
        if (!window.confirm('Вы уверены, что хотите удалить эту заявку?')) return;

        try {
            const authToken = localStorage.getItem('authToken');
            const response = await fetch(`https://your-api-endpoint.com/api/orders/${orderId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Не удалось удалить заявку');
            }

            setOrders(orders.filter(order => order.id !== orderId));
        } catch (err) {
            alert(`Ошибка: ${err.message}`);
        }
    };

    const filteredOrders = selectedStatus
        ? orders.filter(order => order.status === selectedStatus)
        : orders;

    if (loading) return <div className="admin-loading">Загрузка заявок...</div>;
    if (error) return <div className="admin-error">Ошибка: {error}</div>;

    return (
        <div className="admin-orders-page">
            <h1>Управление заявками</h1>
            <p className="admin-page-description">Панель администратора для управления заявками на уголь</p>

            <div className="admin-controls">
                <div className="status-filter">
                    <label htmlFor="status-filter">Фильтр по статусу:</label>
                    <select
                        id="status-filter"
                        value={selectedStatus}
                        onChange={(e) => setSelectedStatus(e.target.value)}
                    >
                        <option value="">Все заявки</option>
                        <option value="PENDING">На рассмотрении</option>
                        <option value="APPROVED">Подтвержденные</option>
                        <option value="REJECTED">Отклоненные</option>
                        <option value="DELIVERED">Доставленные</option>
                        <option value="CANCELLED">Отмененные</option>
                    </select>
                </div>
            </div>

            <div className="admin-orders-list">
                {filteredOrders.length > 0 ? (
                    filteredOrders.map(order => (
                        <AdminOrderCard
                            key={order.id}
                            order={order}
                            onStatusChange={handleStatusChange}
                            onDelete={handleDeleteOrder}
                        />
                    ))
                ) : (
                    <p className="admin-no-orders">Нет заявок по выбранному фильтру</p>
                )}
            </div>
        </div>
    );
};

const AdminOrderCard = ({ order, onStatusChange, onDelete }) => {
    const [currentStatus, setCurrentStatus] = useState(order.status);
    const [isEditing, setIsEditing] = useState(false);
    const [comments, setComments] = useState(order.comments || '');

    const formatDate = (dateString) => {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU');
    };

    const translateStatus = (status) => {
        const statusMap = {
            'PENDING': 'На рассмотрении',
            'APPROVED': 'Подтвержден',
            'REJECTED': 'Отклонен',
            'DELIVERED': 'Доставлен',
            'CANCELLED': 'Отменен'
        };
        return statusMap[status] || status;
    };

    const handleSave = () => {
        onStatusChange(order.id, currentStatus);
        setIsEditing(false);
    };

    return (
        <div className="admin-order-card">
            <div className="admin-order-header">
                <h3>Заявка #{order.id} от пользователя #{order.userId}</h3>
                <div className="admin-order-actions">
                    {!isEditing ? (
                        <>
                            <button
                                className="admin-edit-btn"
                                onClick={() => setIsEditing(true)}
                            >
                                Изменить
                            </button>
                            <button
                                className="admin-delete-btn"
                                onClick={() => onDelete(order.id)}
                            >
                                Удалить
                            </button>
                        </>
                    ) : (
                        <>
                            <button
                                className="admin-save-btn"
                                onClick={handleSave}
                            >
                                Сохранить
                            </button>
                            <button
                                className="admin-cancel-btn"
                                onClick={() => setIsEditing(false)}
                            >
                                Отмена
                            </button>
                        </>
                    )}
                </div>
            </div>

            <div className="admin-order-content">
                <div className="admin-order-details">
                    <div className="admin-detail-row">
                        <span className="admin-detail-label">Тип угля:</span>
                        <span className="admin-detail-value">{order.coalType}</span>
                    </div>
                    <div className="admin-detail-row">
                        <span className="admin-detail-label">Количество:</span>
                        <span className="admin-detail-value">{order.quantity} тонн</span>
                    </div>
                    <div className="admin-detail-row">
                        <span className="admin-detail-label">Адрес доставки:</span>
                        <span className="admin-detail-value">{order.deliveryAddress}</span>
                    </div>
                    <div className="admin-detail-row">
                        <span className="admin-detail-label">Дата доставки:</span>
                        <span className="admin-detail-value">{formatDate(order.deliveryDate)}</span>
                    </div>
                </div>

                <div className="admin-order-status">
                    <div className="admin-detail-row">
                        <span className="admin-detail-label">Статус:</span>
                        {isEditing ? (
                            <select
                                value={currentStatus}
                                onChange={(e) => setCurrentStatus(e.target.value)}
                                className="admin-status-select"
                            >
                                <option value="PENDING">На рассмотрении</option>
                                <option value="APPROVED">Подтвержден</option>
                                <option value="REJECTED">Отклонен</option>
                                <option value="DELIVERED">Доставлен</option>
                                <option value="CANCELLED">Отменен</option>
                            </select>
                        ) : (
                            <span className={`admin-status-badge status-${order.status.toLowerCase()}`}>
                                {translateStatus(order.status)}
                            </span>
                        )}
                    </div>

                    <div className="admin-detail-row">
                        <span className="admin-detail-label">Комментарии:</span>
                        {isEditing ? (
                            <textarea
                                value={comments}
                                onChange={(e) => setComments(e.target.value)}
                                className="admin-comments-input"
                            />
                        ) : (
                            <span className="admin-detail-value">
                                {order.comments || 'нет комментариев'}
                            </span>
                        )}
                    </div>
                </div>

                <div className="admin-order-meta">
                    <div className="admin-meta-row">
                        <span className="admin-meta-label">Создана:</span>
                        <span className="admin-meta-value">{formatDate(order.createdAt)}</span>
                    </div>
                    {order.updatedAt && (
                        <div className="admin-meta-row">
                            <span className="admin-meta-label">Обновлена:</span>
                            <span className="admin-meta-value">{formatDate(order.updatedAt)}</span>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default AdminOrders;